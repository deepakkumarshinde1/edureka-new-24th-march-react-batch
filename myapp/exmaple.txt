https://github.com/deepakkumarshinde1/Edureak-React-24th-March
https://medium.com/in-the-weeds/an-intro-to-advanced-react-hooks-a8af6397fe28
# states and props
# lifecycle in react
# forms (product mang)
# routing

# let keyword to init a variable
# let block scope
# let only declare variable once for a block

# in jsx for dynamic code we use JSX expression i.e => {}

// Parent to child ==> props / property( unidirectional )
// props => {} (collection of property)
// Not able Change value of props inside child

// App is Parent

//What is we handel data inside a component ==> States
// State ==> object i.e {}
// States (Data) Changes ==> Component Rerender (Refresh)

// FC don't have default state
// FC are state less


Class Component (state) < React v16.8 > FC (state) (hooks)

handel a complex logic like class component ==> Hooks
Hooks React Methods ==> every hooks "use"

useState to handel state in FC
we can't use hooks in class component

react devtool
redux devtool
css debugger

application product management
    add a product
        id,
        title,
        price,
        description,
        category,
        image (auto),
        rating
            rate (0 - 5)
            rateCount
    edit a product
    delete product
    print product list

# print data in loop/iteration ==> map of array
# array => push , splice , slice , find, filter, map , reduce, sort , every , some , includes, foreach

Work with a any comp
React Lifecycle Comp
# initialization 
# load ==> mounting 
# update ==> updating
# unloaded ==> unmounting 

// onload you want call a server data (api call) or make some changes
// update  you want call a server data (api call) or make some changes
// unmounting  you want call a server data (api call) or make some changes reset some data

class comp
    init ==> render ==> mounting  call server data
    constructor => only once
    render => on state change
    componentDidMount* => only once
    componentDidUpdate* => every comp update
    componentWillUnmount* => only once
    getDerivedStateFromProps(static)* only once


FC ==> we a hook (method) ==> useEffect( cbFn , []) ==> [] (dependency list)
    # initialization ==> fun call
    # load ==> mounting ==> useEffect( cbFn , [])
    # update ==> updating ==> useEffect(cbFn ) or  useEffect(cbFn , [dependency]) => dependency are state
    # unloaded ==> unmounting ==> useEffect(()=>{   return ()=>{ unmounting} } , [])

react use for SPA ( react-router-dom (v6.9) )
flipkart.com/product
flipkart.com/product#value (hash value)
flipkart.com/product?key=value (query string)
flipkart.com/product/1 or flipkart.com/product/2 (params)

components 
    BrowserRouter,
    Routes,
    Route (path="/" element="component"),
    Navigate ==> JSX,
    Outlet,
    Link,
    NavLink,
    
hooks
    useParams,
    useSearchParams,
    useNavigate ==> redirect user with javascript,
 

# redux 
    # redux-toolkit
        store => data & state
        reducer => set of function
            slice
                {
                    name:"reducer",
                    initialState:{},
                    reducers:{
                        add(){},
                        update(){}
                    }
                }
        action ==> { type:'ADD' , payload:{name:'dell', prices:40000 , desc:'laptop'} }
        dispatch ==> dispatch(action())

    # react-redux
         useSelector => get store state
         useDispatch => dispatch(action()) --> call redux function
         Provider => add a store to react app

# HTTP Methods 
    GET ==> default
    POST
    PUT
    DELETE
    PATCH
    COPY
    HEAD


# redux saga 
    call => call api
    put ==> call redux action to update record
    takeLatest => take a latest request 
    takeEvery => call multiple request of same call
    all ==> call api at a time


# Hooks
    Hooks are use only in function component
    Hooks can perform complex operation 
    # useState => state in function 
    # useEffect => when side effect in component happened (state)
    Hooks can't inside a class component 
    # useContext => state sharing for small application
        # useContext & Redux ==> it is not recommended to them together
        # 3 PART context use
            # create a context ==> createContext()
            # set a context provider ==> component which return Context.Provider
            # use that context ==> custom hook for reusability
        # Set provider component to index.js
    # useReducer ==> combine state,
    useRef 
        ==> reference to real dom element ,
        ==> all jsx element has ref={} prop
        ==> user defined component are not having ref prop
    useMemo,
    useCallback,
    useLayoutEffect *,
    useImperativeHandle *

# props drilling ==> When we pass function , string , boolean etc from parent to child 
# small application and want to create logic for state sharing like redux ==> useContext


    SQL ==> Structure Query Lang
# graphQL
    server <== REST API (http) ==> client 
    GET , POST , PUT , DELETE
    https://fakestoreapi.com/products
    https://fakestoreapi.com/carts
    https://fakestoreapi.com/users

    server <== GraphQL (HTTP) ==> client
    http://localhost/grapgql?query=


    How to consume ==> GraphQL Response (CLient)

    Build The Server
        
# testing

